1. Provide a DNF construction for a function f such that the maximum term size is equal to the 1-certificate
complexity for f. 
A. Let S be the set of all 1-certificates of f. Mark each bit position as xi. If, for a particular certificate, 
xi = 0, then mark it as NOT xi, else leave it as xi. Now construct a DNF by AND-ing the variables in each certificate
according to the above scheme, and OR-ing all these terms to form a DNF formula f. The maximum term size in this
case will be the size of the 1-certificate complexity. 


2. Explain the DNF algorithm for proving that D(f) is bounded by C^2(f).
A. Let f = T1 OR T2 OR ... Tk be the DNF formula for f for which the maximum term size is C1, using the construction
described above. Thus, for each term Ti in the DNF formula, we use the following method of constructing a decision tree:

-> If T1 has a total of l variables, then the part of the decision tree corresponding to T1 will have exactly l levels, 
such that at each level j, the variable xj in T1 is queried. The path satisfying T1 will end at a leaf labelled 1. 
For every other assignment to the sequence of variables, the leaves will lead to the subtree that is computed recursively
for T2...Tk. (Each variable xj in T1 MUST be queried). 

-> We continue constructing the tree for the remaining Ti. We know that each stage in this construction adds at most C1
levels, since the maximum term size is C1. We will make use of the observation that, since every 1-certificate MUST share
at least one bit-position with a 0-certificate, every stage of this construction must have queried at least one variable 
for each 0-certificate of f. Thus, since the 0-certificate complexity decreases by 1 at each stage of the construction, 
the construction can only have a maximum of C0 stages. 

-> This implies that the depth of the tree, and therefore the decision tree complexity, must have an upper bound of C0 x C1, 
which leads to an upper bound of C^2.


3. Provide decision trees for each of the examples given in B&A.
A. 
(1) OR := For an n-bit OR function, construct a DT as follows. Start with the root corresponding to querying bit x1. If this 
bit is 0, the tree stops and outputs 0; else, it moves to the node querying bit x2, constructed similarly. Only the last node,
bit xn is designed as an identity function: if this bit is 0, output 0; else, output 1. 

(2) GRAPH CONN := 


4. Complete the exercises provided in DT.